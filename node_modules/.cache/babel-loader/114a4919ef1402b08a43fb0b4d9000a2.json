{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tatto\\\\OneDrive\\\\Escritorio\\\\entregable III\\\\entregable-frontend-3-junio22-main\\\\entregable-frontend-3-junio22-main\\\\src\\\\components\\\\Item.js\",\n    _s = $RefreshSig$();\n\n// El componente Item no tiene componentes hijos.\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\n// Maqueta de Item:\n//    h3\n//    p\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\nimport { useState } from \"react\"; //    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Item(props) {\n  _s();\n\n  const [stock, asignar] = useState(props.producto.stock);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"producto\",\n    children: [\"hola mundo\", stock, \"stock\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => asignarCantidad(stock - 1),\n      disabled: stock === 0,\n      children: \"boton\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Item, \"4T0QqO8FiCQscLgIzkX3KF1JZCk=\");\n\n_c = Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"names":["useState","Item","props","stock","asignar","producto","asignarCantidad"],"sources":["C:/Users/tatto/OneDrive/Escritorio/entregable III/entregable-frontend-3-junio22-main/entregable-frontend-3-junio22-main/src/components/Item.js"],"sourcesContent":["\r\n// El componente Item no tiene componentes hijos.\r\n// ESTADO: Item debe tener un número para almacenar la cantidad de stock, la misma se la defina el padre a la hora de crearlo.\r\n// MÉTODOS: Item debe manejar el click de su boton para restar la cantidad en stock de sí mismo y a su vez poder aumentar el estado de su \"abuelo\" App.\r\n// PROPS: Item recibe todos los campos que muestra en pantalla: nombre, descripcion, stock y el métodos heredados para su uso.\r\n// Maqueta de Item:\r\n//    h3\r\n//    p\r\n//    h5 > span    (este span debe mostrar la cantidad si es mayor a 0 \"agotado\" si llega a 0)\r\n\r\nimport { useState } from \"react\"\r\n\r\n//    button       (este boton debe permitir comprar, pero si la cantidad es menor a 0 debe estar deshabilitado y decir \"Sin stock\")\r\n\r\nexport default function Item(props) {\r\n  const [stock, asignar] = useState(props.producto.stock)\r\n\r\n  return (\r\n    <div className='producto'>\r\n      hola mundo\r\n      {stock}\r\n      stock\r\n      <button  onClick={()=> asignarCantidad(stock - 1)} disabled={stock === 0}>\r\n          boton\r\n          \r\n      </button>\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAAA;;EAClC,MAAM,CAACC,KAAD,EAAQC,OAAR,IAAmBJ,QAAQ,CAACE,KAAK,CAACG,QAAN,CAAeF,KAAhB,CAAjC;EAEA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,yBAEGA,KAFH,wBAIE;MAAS,OAAO,EAAE,MAAKG,eAAe,CAACH,KAAK,GAAG,CAAT,CAAtC;MAAmD,QAAQ,EAAEA,KAAK,KAAK,CAAvE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAhBuBF,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}